/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Casilla.*;
import Juego.JuegoEscalerasYSerpientes;
import Jugador.*;
import WindowsListener.IrAlMenu;
import escalerasyserpientes.SistemaGeneral;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author baquiax
 */
public class VentaInicioPartida extends javax.swing.JFrame {

    public static final String TABLERO = "tablero";
    public static final String PIERDE_TURNO = "pierdeturno";
    public static final String TIRA_DADOS = "tiradados";
    public static final String AVANZA = "avanza";
    public static final String RETROCEDE = "retrocede";
    public static final String SUBIDA = "subida";
    public static final String BAJADA = "bajada";

    VentanaPrincipal menu;
    SistemaGeneral sistema;
    int contador;
    JComboBox jcbJugadores;

    List<Jugador> jugadoresPartida;
    Casilla[][] casillas;
    List<Casilla> listaCasillas;

    /**
     * Creates new form VentaInicioPartida
     * @param menu
     * @param sistema
     */
    public VentaInicioPartida(VentanaPrincipal menu, SistemaGeneral sistema) {
        initComponents();
        this.menu = menu;
        this.sistema = sistema;
        this.contador = 0;
        this.jugadoresPartida = new ArrayList<Jugador>();

        IrAlMenu irAlMenu = new IrAlMenu(this.menu, this);
        super.addWindowListener(irAlMenu);

        mostrarJugadores();

        super.setResizable(false);
        super.setLocationRelativeTo(null);
        super.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblJugadores = new javax.swing.JLabel();
        btnAgregarJugadorAPartida = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblJugadores = new javax.swing.JTable();
        jbnLeerDatosTablero = new javax.swing.JButton();
        btnJugar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Inicio Partida");

        lblJugadores.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        lblJugadores.setText("Jugadores");

        btnAgregarJugadorAPartida.setText("Agregar a partida");
        btnAgregarJugadorAPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarJugadorAPartidaActionPerformed(evt);
            }
        });

        tblJugadores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "NOMBRE", "APELLIDO", "PJ", "PG", "PP"
            }
        ));
        jScrollPane1.setViewportView(tblJugadores);

        jbnLeerDatosTablero.setText("Leer Tablero");
        jbnLeerDatosTablero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbnLeerDatosTableroActionPerformed(evt);
            }
        });

        btnJugar.setText("Jugar");
        btnJugar.setEnabled(false);
        btnJugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJugarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblJugadores, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAgregarJugadorAPartida, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbnLeerDatosTablero)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(btnJugar, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblJugadores, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(btnAgregarJugadorAPartida)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbnLeerDatosTablero)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(btnJugar)
                .addGap(58, 58, 58))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarJugadorAPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarJugadorAPartidaActionPerformed
        JColorChooser colorChooser = new JColorChooser();
        String[] nombreColumnas = {"ID", "NOMBRE", "APELLIDO", "PJ", "PG", "PP"};
        Jugador aux = (Jugador) jcbJugadores.getSelectedItem();
        aux.setColor(colorChooser.showDialog(this, aux.getNombre() + ": Selecciona un color para tu ficha", Color.yellow));
        jugadoresPartida.add(aux);
        String[][] data = new String[jugadoresPartida.size()][6];
        for (int i = 0; i < jugadoresPartida.size(); i++) {
            data[i][0] = String.valueOf(jugadoresPartida.get(i).getId());
            data[i][1] = jugadoresPartida.get(i).getNombre();
            data[i][2] = jugadoresPartida.get(i).getApellido();
            data[i][3] = String.valueOf(jugadoresPartida.get(i).getPartidasJugadas());
            data[i][4] = String.valueOf(jugadoresPartida.get(i).getPartidasGanadas());
            data[i][5] = String.valueOf(jugadoresPartida.get(i).getPartidasPerdidas());
        }
        tblJugadores.setModel(new DefaultTableModel(data, nombreColumnas));
        contador++;
        if (contador > 1 && casillas != null) {
            btnJugar.setEnabled(true);
        }
        if (contador == 5) {
            btnAgregarJugadorAPartida.setEnabled(false);
        }
    }//GEN-LAST:event_btnAgregarJugadorAPartidaActionPerformed

    private void jbnLeerDatosTableroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbnLeerDatosTableroActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();

        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.txt", "txt");
        fileChooser.setFileFilter(filtro);

        int seleccion = fileChooser.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            String ruta = fileChooser.getSelectedFile().getAbsolutePath();
            try (FileReader entrada = new FileReader(ruta)) {
                BufferedReader miBuffer = new BufferedReader(entrada);
                String linea = "";
                String datos = "";
                while (linea != null) {

                    linea = miBuffer.readLine();
                    if (linea != null) {
                        datos = datos + linea + "\n";
                    }
                }
                String[] aux = datos.split("\n");
                for (int i = 0; i < aux.length; i++) {
                    ejecutarLinea(aux[i]);
                }
            } catch (FileNotFoundException ex) {

            } catch (IOException ex) {

            }
        } else if (seleccion == JFileChooser.CANCEL_OPTION) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ningÃºn fichero", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (rootPaneCheckingEnabled) {
            JOptionPane.showMessageDialog(this, "Error en la busqueda del archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
        if (contador > 1 && casillas != null) {
            btnJugar.setEnabled(true);
        }
    }//GEN-LAST:event_jbnLeerDatosTableroActionPerformed

    private void btnJugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJugarActionPerformed
        // TODO add your handling code here:
        JuegoEscalerasYSerpientes juegito = new JuegoEscalerasYSerpientes(jugadoresPartida, casillas, listaCasillas);
        VentanaJuego juego = new VentanaJuego(menu, juegito);
        super.setVisible(false);
    }//GEN-LAST:event_btnJugarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarJugadorAPartida;
    private javax.swing.JButton btnJugar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbnLeerDatosTablero;
    private javax.swing.JLabel lblJugadores;
    private javax.swing.JTable tblJugadores;
    // End of variables declaration//GEN-END:variables

    private void mostrarJugadores() {
        List<Jugador> jugadores = sistema.getJugadores().getListadoJugadores();
        Jugador[] players = jugadores.stream().toArray(Jugador[]::new);
        jcbJugadores = new JComboBox(players);
        jcbJugadores.setBounds(10, 50, 500, 30);
        super.add(jcbJugadores);
    }

    public void ejecutarLinea(String linea) {
        if (validarLinea(linea)) {
            int accion = seleccionarLineaAccion(linea);
            switch (accion) {
                case 0:
                    iniciarTablero(linea);
                    break;
                case 1:
                    agregarCasillaPierdeTurno(linea);
                    break;
                case 2:
                    agregarCasillaTirarDados(linea);
                    break;
                case 3:
                    agregarCasillaAvanza(linea);
                    break;
                case 4:
                    agregarCasillaRetrocede(linea);
                    break;
                case 5:
                    agregarCasillaEscalera(linea);
                    break;
                case 6:
                    agregarCasillaSerpiente(linea);
                    break;
                default:
            }
        }

    }

    public boolean validarLinea(String linea) {
        boolean valido = false;
        if (linea.indexOf(TABLERO) == 0) {
            valido = true;
        } else if (linea.indexOf(PIERDE_TURNO) == 0) {
            valido = true;
        } else if (linea.indexOf(TIRA_DADOS) == 0) {
            valido = true;
        } else if (linea.indexOf(AVANZA) == 0) {
            valido = true;
        } else if (linea.indexOf(RETROCEDE)
                == 0) {
            valido = true;
        } else if (linea.indexOf(SUBIDA)
                == 0) {
            valido = true;
        } else if (linea.indexOf(BAJADA)
                == 0) {
            valido = true;
        }
        return valido;
    }

    public int seleccionarLineaAccion(String linea) {
        int accion = -1;
        if (linea.indexOf(TABLERO) == 0) {
            accion = 0;
        } else if (linea.indexOf(PIERDE_TURNO) == 0) {
            accion = 1;
        } else if (linea.indexOf(TIRA_DADOS) == 0) {
            accion = 2;
        } else if (linea.indexOf(AVANZA) == 0) {
            accion = 3;
        } else if (linea.indexOf(RETROCEDE) == 0) {
            accion = 4;
        } else if (linea.indexOf(SUBIDA) == 0) {
            accion = 5;
        } else if (linea.indexOf(BAJADA) == 0) {
            accion = 6;
        }
        return accion;
    }

    public String quitarIndicacion(String linea, String indicacion) {
        String aux = "";
        for (int i = indicacion.length(); i < linea.length(); i++) {
            aux = aux + linea.charAt(i);
        }
        return aux;
    }

    public String quitarParentesis(String coordenadas) {
        String aux = "";
        for (int i = 1; i < coordenadas.length() - 1; i++) {
            aux = aux + coordenadas.charAt(i);
        }
        return aux;
    }

    private void iniciarTablero(String linea) {
        String coordenadas = quitarIndicacion(linea, TABLERO);

        coordenadas = quitarParentesis(coordenadas);
        String[] coordenadasSeparadas = coordenadas.split(",");

        int filas = Integer.valueOf(coordenadasSeparadas[0]);
        int columnas = Integer.valueOf(coordenadasSeparadas[1]);

        casillas = new Casilla[filas][columnas];
        listaCasillas = new ArrayList<Casilla>();
        boolean par = true;
        int id = 0;
        for (int i = 0; i < casillas.length; i++) {
            if (par) {
                for (int j = 0; j < casillas[i].length; j++) {
                    casillas[i][j] = new Casilla(i, j, id);
                    listaCasillas.add(casillas[i][j]);
                    id++;
                }
                par = false;
            } else {
                for (int j = casillas[i].length - 1; j >= 0; j--) {
                    casillas[i][j] = new Casilla(i, j, id);
                    listaCasillas.add(casillas[i][j]);
                    id++;
                }
                par = true;
            }
        }
        //Declarar el inicio del tablero
        casillas[0][0] = new CasillaInicio();
        listaCasillas.set(0, casillas[0][0]);
        //Declarar el final del tablero
        Casilla aux;
        if (par) {
            aux = casillas[casillas.length - 1][0];
            casillas[casillas.length - 1][0]
                    = new CasillaFin(aux.getFila(), aux.getColumna(), aux.getId());
            listaCasillas.set(listaCasillas.size() - 1,
                    casillas[casillas.length - 1][0]);
        } else {
            aux = casillas[casillas.length - 1][casillas[0].length - 1];
            casillas[casillas.length - 1][casillas[0].length - 1]
                    = new CasillaFin(aux.getFila(), aux.getColumna(), aux.getId());
            listaCasillas.set(listaCasillas.size() - 1,
                    casillas[casillas.length - 1][casillas[0].length - 1]);
        }
    }

    private void agregarCasillaPierdeTurno(String linea) {
        String coordenadas = quitarIndicacion(linea, PIERDE_TURNO);

        coordenadas = quitarParentesis(coordenadas);
        String[] coordenadasSeparadas = coordenadas.split(",");
        int filas = Integer.valueOf(coordenadasSeparadas[0]);
        int columnas = Integer.valueOf(coordenadasSeparadas[1]);
        Casilla aux = casillas[filas][columnas];
        casillas[filas][columnas] = new CasillaPierdeTurno(filas, columnas,
                aux.getId());
        listaCasillas.set(aux.getId(), casillas[filas][columnas]);
    }

    private void agregarCasillaTirarDados(String linea) {
        String coordenadas = quitarIndicacion(linea, TIRA_DADOS);

        coordenadas = quitarParentesis(coordenadas);
        String[] coordenadasSeparadas = coordenadas.split(",");
        int filas = Integer.valueOf(coordenadasSeparadas[0]);
        int columnas = Integer.valueOf(coordenadasSeparadas[1]);

        Casilla aux = casillas[filas][columnas];
        casillas[filas][columnas] = new CasillaBonoDados(filas, columnas,
                aux.getId());
        listaCasillas.set(aux.getId(), casillas[filas][columnas]);
    }

    private void agregarCasillaAvanza(String linea) {
        String coordenadas = quitarIndicacion(linea, AVANZA);

        coordenadas = quitarParentesis(coordenadas);
        String[] coordenadasSeparadas = coordenadas.split(",");

        int filas = Integer.valueOf(coordenadasSeparadas[0]);
        int columnas = Integer.valueOf(coordenadasSeparadas[1]);
        int NoPosiciones = Integer.valueOf(coordenadasSeparadas[2]);

        Casilla aux = casillas[filas][columnas];
        casillas[filas][columnas] = new CasillaBonoAvance(NoPosiciones, filas, columnas,
                aux.getId());
        listaCasillas.set(aux.getId(), casillas[filas][columnas]);
    }

    private void agregarCasillaRetrocede(String linea) {
        String coordenadas = quitarIndicacion(linea, RETROCEDE);

        coordenadas = quitarParentesis(coordenadas);
        String[] coordenadasSeparadas = coordenadas.split(",");

        int filas = Integer.valueOf(coordenadasSeparadas[0]);
        int columnas = Integer.valueOf(coordenadasSeparadas[1]);
        int NoPosiciones = Integer.valueOf(coordenadasSeparadas[2]);

        Casilla aux = casillas[filas][columnas];
        casillas[filas][columnas] = new CasillaRetroceso(NoPosiciones, filas, columnas,
                aux.getId());
        listaCasillas.set(aux.getId(), casillas[filas][columnas]);
    }

    private void agregarCasillaEscalera(String linea) {
        String coordenadas = quitarIndicacion(linea, SUBIDA);

        coordenadas = quitarParentesis(coordenadas);
        String[] coordenadasSeparadas = coordenadas.split(",");

        int filas = Integer.valueOf(coordenadasSeparadas[0]);
        int columnas = Integer.valueOf(coordenadasSeparadas[1]);
        int filaFin = Integer.valueOf(coordenadasSeparadas[2]);
        int columnaFin = Integer.valueOf(coordenadasSeparadas[2]);
        int idCasillaSubir = casillas[filaFin][columnaFin].getId();

        Casilla aux = casillas[filas][columnas];
        casillas[filas][columnas] = new CasillaEscalera(filaFin, columnaFin, idCasillaSubir,
                filas, columnas, aux.getId());
        listaCasillas.set(aux.getId(), casillas[filas][columnas]);
    }

    private void agregarCasillaSerpiente(String linea) {
        String coordenadas = quitarIndicacion(linea, SUBIDA);

        coordenadas = quitarParentesis(coordenadas);
        String[] coordenadasSeparadas = coordenadas.split(",");

        int filas = Integer.valueOf(coordenadasSeparadas[0]);
        int columnas = Integer.valueOf(coordenadasSeparadas[1]);
        int filaFin = Integer.valueOf(coordenadasSeparadas[2]);
        int columnaFin = Integer.valueOf(coordenadasSeparadas[2]);
        int idCasillaSubir = casillas[filaFin][columnaFin].getId();

        Casilla aux = casillas[filas][columnas];
        casillas[filas][columnas] = new CasillaSerpiente(filaFin, columnaFin, idCasillaSubir,
                filas, columnas, aux.getId());
        listaCasillas.set(aux.getId(), casillas[filas][columnas]);
    }

}
